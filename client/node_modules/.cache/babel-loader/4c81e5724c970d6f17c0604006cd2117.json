{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInSuccess, signInFailure } from './user.actions';\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession)]);\n}","map":{"version":3,"sources":["C:/Users/Lucas/Desktop/lucas/ecommerce/clothes/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","signInSuccess","signInFailure","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SAASC,IAAT,EAAeC,cAAf,EACCC,yBADD,EAECC,cAFD,QAGQ,+BAHR;AAKA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,gBAA7C;AAGA,OAAO,UAAUC,uBAAV,CAAkCC,QAAlC,EAA4C;AAClD,MAAI;AACH,UAAMC,OAAO,GAAG,MAAMV,IAAI,CAACI,yBAAD,EAA4BK,QAA5B,CAA1B;AACA,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMd,GAAG,CAACQ,aAAa,CAAC;AAAEO,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AACvB,SAAGF,YAAY,CAACG,IAAb;AADoB,KAAD,CAAd,CAAT;AAGA,GAND,CAME,OAAOC,KAAP,EAAc;AACf,UAAMjB,GAAG,CAACS,aAAa,CAACQ,KAAD,CAAd,CAAT;AACA;AACD;AAED,OAAO,UAAUC,gBAAV,GAA6B;AACnC,MAAI;AACH,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMf,IAAI,CAACgB,eAAL,CAAqBf,cAArB,CAArB;AACA,UAAMK,uBAAuB,CAACS,IAAD,CAA7B;AACA,GAHD,CAGE,OAAOF,KAAP,EAAc;AACf,UAAMjB,GAAG,CAACS,aAAa,CAACQ,KAAD,CAAd,CAAT;AACA;AACD;AAED,OAAO,UAAUI,eAAV,CAA0B;AAACC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAV,CAA1B,EAA0D;AAChE,MAAI;AACH,UAAM;AAAEL,MAAAA;AAAF,QAAW,MAAMf,IAAI,CAACqB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMd,uBAAuB,CAACS,IAAD,CAA7B;AACA,GAHD,CAGE,OAAMF,KAAN,EAAa;AACdjB,IAAAA,GAAG,CAACS,aAAa,CAACQ,KAAD,CAAd,CAAH;AACA;AACD;AAED,OAAO,UAAUS,mBAAV,GAAgC;AACtC,MAAI;AACH,UAAMf,QAAQ,GAAG,MAAMJ,cAAc,EAArC;AACA,QAAI,CAACI,QAAL,EAAe;AACf,UAAMD,uBAAuB,CAACC,QAAD,CAA7B;AACA,GAJD,CAIE,OAAMM,KAAN,EAAa;AACd,UAAMjB,GAAG,CAACS,aAAa,CAACQ,KAAD,CAAd,CAAT;AACA;AACD;AAED,OAAO,UAAUU,mBAAV,GAAgC;AACtC,QAAM5B,UAAU,CAACI,eAAe,CAACyB,oBAAjB,EAAuCV,gBAAvC,CAAhB;AACA;AAED,OAAO,UAAUW,kBAAV,GAA+B;AACrC,QAAM9B,UAAU,CAACI,eAAe,CAAC2B,mBAAjB,EAAsCT,eAAtC,CAAhB;AACA;AAED,OAAO,UAAUU,kBAAV,GAA+B;AACrC,QAAMhC,UAAU,CAACI,eAAe,CAAC6B,kBAAjB,EAAqCN,mBAArC,CAAhB;AACA;AAED,OAAO,UAAUO,SAAV,GAAsB;AAC5B,QAAMhC,GAAG,CAAC,CACTC,IAAI,CAACyB,mBAAD,CADK,EAETzB,IAAI,CAAC2B,kBAAD,CAFK,EAGT3B,IAAI,CAAC6B,kBAAD,CAHK,CAAD,CAAT;AAKA","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\r\n\r\nimport UserActionTypes from './user.types';\r\n\r\nimport { auth, googleProvider, \r\n\tcreateUserProfileDocument,\r\n\tgetCurrentUser \r\n\t} from '../../firebase/firebase.utils';\r\n\r\nimport { signInSuccess, signInFailure } from './user.actions';\r\n\r\n\r\nexport function* getSnapshotFromUserAuth(userAuth) {\r\n\ttry {\r\n\t\tconst userRef = yield call(createUserProfileDocument, userAuth);\r\n\t\tconst userSnapshot = yield userRef.get();\r\n\t\tyield put(signInSuccess({ id: userSnapshot.id,\r\n\t\t ...userSnapshot.data() })\r\n\t\t);\r\n\t} catch (error) {\r\n\t\tyield put(signInFailure(error));\r\n\t}\t\r\n}\r\n\r\nexport function* signInWithGoogle() {\r\n\ttry {\r\n\t\tconst {user} = yield auth.signInWithPopup(googleProvider);\r\n\t\tyield getSnapshotFromUserAuth(user);\r\n\t} catch (error) {\r\n\t\tyield put(signInFailure(error));\r\n\t}\r\n}\r\n\r\nexport function* signInWithEmail({payload: { email, password }}) {\r\n\ttry {\r\n\t\tconst { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n\t\tyield getSnapshotFromUserAuth(user);\r\n\t} catch(error) {\r\n\t\tput(signInFailure(error))\r\n\t}\r\n}\r\n\r\nexport function* isUserAuthenticated() {\r\n\ttry {\r\n\t\tconst userAuth = yield getCurrentUser();\r\n\t\tif (!userAuth) return;\r\n\t\tyield getSnapshotFromUserAuth(userAuth);\r\n\t} catch(error) {\r\n\t\tyield put(signInFailure(error));\r\n\t}\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n\tyield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\r\n}\r\n\r\nexport function* onEmailSignInStart() {\r\n\tyield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\r\n}\r\n\r\nexport function* onCheckUserSession() {\r\n\tyield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\r\n}\r\n\r\nexport function* userSagas() {\r\n\tyield all([\r\n\t\tcall(onGoogleSignInStart), \r\n\t\tcall(onEmailSignInStart),\r\n\t\tcall(onCheckUserSession)\r\n\t\t]);\r\n}"]},"metadata":{},"sourceType":"module"}